include:
  # local/project/template/remote
  - project: 'my-group/my-project'
    file: '/templates/.gitlab-ci-template.yml'
  # auto devops build
  - template: 'Jobs/Build.gitlab-ci.yml'

# .pre .post 可以直接使用，不需要定义
stages:
  - clean
  - build
  - test
  - provision
  - deploy
  - destroy
  - release

variables:
  TF_ADDRESS: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/${CI_COMMIT_REF_SLUG}
  TF_VAR_ENVIRONMENT_NAME: ${CI_PROJECT_PATH_SLUG}_${CI_PROJECT_ID}_${CI_COMMIT_REF_SLUG}
  TF_VAR_SERVICE_DESK_EMAIL: incoming+${CI_PROJECT_PATH_SLUG}-${CI_PROJECT_ID}-issue-@incoming.gitlab.com
  TF_VAR_SHORT_ENVIRONMENT_NAME: ${CI_PROJECT_ID}-${CI_COMMIT_REF_SLUG}
  TF_VAR_SMTP_FROM: ${SMTP_FROM}

cache:
  paths:
    - .terraform

before_script:
  - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER  $CI_REGISTRY --password-stdin

.needs_aws_vars:
  rules:
    - if: '$AWS_ACCESS_KEY_ID && $AWS_SECRET_ACCESS_KEY && $AWS_DEFAULT_REGION'
      when: on_success
    - when: never

terraform_apply:
  stage: provision
  image: registry.gitlab.com/gitlab-org/5-minute-production-app/deploy-template/stable
  extends: .needs_aws_vars
  resource_group: terraform
  before_script:
    - cp /*.tf .
    - cp /deploy.sh .
  script:
    - gitlab-terraform init
    - gitlab-terraform plan
    - gitlab-terraform plan-json
    - gitlab-terraform apply

deploy:
  stage: deploy
  image: registry.gitlab.com/gitlab-org/5-minute-production-app/deploy-template/stable
  pull_policy: always
  extends: .needs_aws_vars
  resource_group: deploy
  before_script:
    - cp /*.tf .
    - cp /deploy.sh .
    - cp /conf.nginx .
  script:
    - ./deploy.sh
  artifacts:
    reports:
      dotenv: deploy.env
  environment:
    name: $CI_COMMIT_REF_SLUG
    url: $DYNAMIC_ENVIRONMENT_URL
    on_stop: terraform_destroy

terraform_destroy:
  variables:
    GIT_STRATEGY: none
  stage: destroy
  image: registry.gitlab.com/gitlab-org/5-minute-production-app/deploy-template/stable
  before_script:
    - cp /*.tf .
    - cp /deploy.sh .
  script:
    - gitlab-terraform destroy -auto-approve
  environment:
    name: $CI_COMMIT_REF_SLUG
    action: stop
  rules:
    - if: '$AWS_ACCESS_KEY_ID && $AWS_SECRET_ACCESS_KEY && $AWS_DEFAULT_REGION && $CI_COMMIT_REF_PROTECTED == "false"'
      when: manual
    - when: never
  only:
    - $CI_COMMIT_BRANCH  #只能为分支名称
